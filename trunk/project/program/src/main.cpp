#include <iostream>
#include "schedule.h"
#include "employee.h"
#include "team.h"
#include "doctor.h"
#include "medic.h"
#include "teamQueues.h"
#include <memory>
#include "employeeRepository.h"
#include "teamRepository.h"
#include "finalSchedule.h"
#include "rescuerS.h"
#include "driverS.h"
#include "rescuerN.h"
#include "driverN.h"
#include "medicalRecorder.h"
#include "dispatcher.h"

using namespace std;

int main()
{
    std::shared_ptr<Position> doctor=std::make_shared<Doctor>();
    std::shared_ptr<Position> rescuerS=std::make_shared<RescuerS>();
    std::shared_ptr<Position> driverS=std::make_shared<DriverS>();
    std::shared_ptr<Position> rescuerN=std::make_shared<RescuerN>();
    std::shared_ptr<Position> driverN=std::make_shared<DriverN>();
    std::shared_ptr<Position> medic=std::make_shared<Medic>();
    std::shared_ptr<Position> medicalRecorder=std::make_shared<MedicalRecorder>();
    std::shared_ptr<Position> dispatcher=std::make_shared<Dispatcher>();

    //employee Repository
    EmployeeRepository *empRepo = EmployeeRepository::getInstance();

    std::unique_ptr<Shift> shift1;
    std::unique_ptr<Shift> shift2;
    std::unique_ptr<Shift> shift3;
    std::unique_ptr<Shift> shift4;
    std::unique_ptr<Shift> shift5;
    std::unique_ptr<Shift> shift6;
    std::unique_ptr<Shift> shift7;
    std::unique_ptr<Shift> shift8;
    std::unique_ptr<Shift> shift9;
    std::unique_ptr<Shift> shift10;
    std::unique_ptr<Shift> shift11;
    std::unique_ptr<Shift> shift12;
    std::unique_ptr<Shift> shift13;
    std::unique_ptr<Shift> shift14;
    std::unique_ptr<Shift> shift15;

    std::shared_ptr<Employee> e1=std::make_shared<Employee>("Be",1);
    (*e1).addPosition(rescuerS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e1).addDesiredShift(shift1);
    (*e1).addDesiredShift(shift2);
    (*e1).addDesiredShift(shift3);
    (*e1).addDesiredShift(shift4);
    (*e1).addDesiredShift(shift5);
    (*e1).addDesiredShift(shift6);
    (*e1).addDesiredShift(shift7);
    (*e1).addDesiredShift(shift8);
    (*e1).addDesiredShift(shift9);
    (*e1).addDesiredShift(shift10);
    (*e1).addDesiredShift(shift11);
    (*e1).addDesiredShift(shift12);
    (*e1).addDesiredShift(shift13);
    (*e1).addDesiredShift(shift14);
    (*e1).addDesiredShift(shift15);
    (*empRepo).addEmployee(e1);
    std::shared_ptr<Employee> e2=std::make_shared<Employee>("Bi",2);
    (*e2).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e2).addDesiredShift(shift1);
    (*e2).addDesiredShift(shift2);
    (*e2).addDesiredShift(shift3);
    (*e2).addDesiredShift(shift4);
    (*e2).addDesiredShift(shift5);
    (*e2).addDesiredShift(shift6);
    (*e2).addDesiredShift(shift7);
    (*e2).addDesiredShift(shift8);
    (*e2).addDesiredShift(shift9);
    (*e2).addDesiredShift(shift10);
    (*e2).addDesiredShift(shift11);
    (*e2).addDesiredShift(shift12);
    (*e2).addDesiredShift(shift13);
    (*e2).addDesiredShift(shift14);
    (*e2).addDesiredShift(shift15);
    (*empRepo).addEmployee(e2);
    std::shared_ptr<Employee> e3=std::make_shared<Employee>("Bo",3);
    (*e3).addPosition(driverN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e3).addDesiredShift(shift1);
    (*e3).addDesiredShift(shift2);
    (*e3).addDesiredShift(shift3);
    (*e3).addDesiredShift(shift4);
    (*e3).addDesiredShift(shift5);
    (*e3).addDesiredShift(shift6);
    (*e3).addDesiredShift(shift7);
    (*e3).addDesiredShift(shift8);
    (*e3).addDesiredShift(shift9);
    (*e3).addDesiredShift(shift10);
    (*e3).addDesiredShift(shift11);
    (*e3).addDesiredShift(shift12);
    (*e3).addDesiredShift(shift13);
    (*e3).addDesiredShift(shift14);
    (*e3).addDesiredShift(shift15);
    (*empRepo).addEmployee(e3);
    std::shared_ptr<Employee> e4=std::make_shared<Employee>("Ci",4);
    (*e4).addPosition(rescuerN);
    (*e4).addPosition(driverN);
    (*e4).addPosition(rescuerS);
    (*e4).addPosition(driverS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e4).addDesiredShift(shift1);
    (*e4).addDesiredShift(shift2);
    (*e4).addDesiredShift(shift3);
    (*e4).addDesiredShift(shift4);
    (*e4).addDesiredShift(shift5);
    (*e4).addDesiredShift(shift6);
    (*e4).addDesiredShift(shift7);
    (*e4).addDesiredShift(shift8);
    (*e4).addDesiredShift(shift9);
    (*e4).addDesiredShift(shift10);
    (*e4).addDesiredShift(shift11);
    (*e4).addDesiredShift(shift12);
    (*e4).addDesiredShift(shift13);
    (*e4).addDesiredShift(shift14);
    (*e4).addDesiredShift(shift15);
    (*empRepo).addEmployee(e4);
    std::shared_ptr<Employee> e5=std::make_shared<Employee>("",5);
    std::shared_ptr<Employee> e6=std::make_shared<Employee>("Du",6);
    (*e6).addPosition(rescuerN);
    (*e6).addPosition(driverN);
    (*e6).addPosition(driverS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e6).addDesiredShift(shift1);
    (*e6).addDesiredShift(shift2);
    (*e6).addDesiredShift(shift3);
    (*e6).addDesiredShift(shift4);
    (*e6).addDesiredShift(shift5);
    (*e6).addDesiredShift(shift6);
    (*e6).addDesiredShift(shift7);
    (*e6).addDesiredShift(shift8);
    (*e6).addDesiredShift(shift9);
    (*e6).addDesiredShift(shift10);
    (*e6).addDesiredShift(shift11);
    (*e6).addDesiredShift(shift12);
    (*e6).addDesiredShift(shift13);
    (*e6).addDesiredShift(shift14);
    (*e6).addDesiredShift(shift15);
    (*empRepo).addEmployee(e6);
    std::shared_ptr<Employee> e7=std::make_shared<Employee>("Dz",7);
    (*e7).addPosition(rescuerS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e7).addDesiredShift(shift1);
    (*e7).addDesiredShift(shift2);
    (*e7).addDesiredShift(shift3);
    (*e7).addDesiredShift(shift4);
    (*e7).addDesiredShift(shift5);
    (*e7).addDesiredShift(shift6);
    (*e7).addDesiredShift(shift7);
    (*e7).addDesiredShift(shift8);
    (*e7).addDesiredShift(shift9);
    (*e7).addDesiredShift(shift10);
    (*e7).addDesiredShift(shift11);
    (*e7).addDesiredShift(shift12);
    (*e7).addDesiredShift(shift13);
    (*e7).addDesiredShift(shift14);
    (*e7).addDesiredShift(shift15);
    (*empRepo).addEmployee(e7);
    std::shared_ptr<Employee> e8=std::make_shared<Employee>("Cy",8);
    (*e8).addPosition(driverN);
    (*e8).addPosition(driverS);
    (*e8).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e8).addDesiredShift(shift1);
    (*e8).addDesiredShift(shift2);
    (*e8).addDesiredShift(shift3);
    (*e8).addDesiredShift(shift4);
    (*e8).addDesiredShift(shift5);
    (*e8).addDesiredShift(shift6);
    (*e8).addDesiredShift(shift7);
    (*e8).addDesiredShift(shift8);
    (*e8).addDesiredShift(shift9);
    (*e8).addDesiredShift(shift10);
    (*e8).addDesiredShift(shift11);
    (*e8).addDesiredShift(shift12);
    (*e8).addDesiredShift(shift13);
    (*e8).addDesiredShift(shift14);
    (*e8).addDesiredShift(shift15);
    (*empRepo).addEmployee(e8);
    std::shared_ptr<Employee> e9=std::make_shared<Employee>("Fi",9);
    (*e9).addPosition(driverN);
    (*e9).addPosition(driverS);
    (*e9).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e9).addDesiredShift(shift1);
    (*e9).addDesiredShift(shift2);
    (*e9).addDesiredShift(shift3);
    (*e9).addDesiredShift(shift4);
    (*e9).addDesiredShift(shift5);
    (*e9).addDesiredShift(shift6);
    (*e9).addDesiredShift(shift7);
    (*e9).addDesiredShift(shift8);
    (*e9).addDesiredShift(shift9);
    (*e9).addDesiredShift(shift10);
    (*e9).addDesiredShift(shift11);
    (*e9).addDesiredShift(shift12);
    (*e9).addDesiredShift(shift13);
    (*e9).addDesiredShift(shift14);
    (*e9).addDesiredShift(shift15);
    (*empRepo).addEmployee(e9);
    std::shared_ptr<Employee> e10=std::make_shared<Employee>("Ga",10);
    (*e10).addPosition(dispatcher);
    (*e10).addPosition(driverN);
    (*e10).addPosition(rescuerS);
    (*e10).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e10).addDesiredShift(shift1);
    (*e10).addDesiredShift(shift2);
    (*e10).addDesiredShift(shift3);
    (*e10).addDesiredShift(shift4);
    (*e10).addDesiredShift(shift5);
    (*e10).addDesiredShift(shift6);
    (*e10).addDesiredShift(shift7);
    (*e10).addDesiredShift(shift8);
    (*e10).addDesiredShift(shift9);
    (*e10).addDesiredShift(shift10);
    (*e10).addDesiredShift(shift11);
    (*e10).addDesiredShift(shift12);
    (*e10).addDesiredShift(shift13);
    (*e10).addDesiredShift(shift14);
    (*e10).addDesiredShift(shift15);
    (*empRepo).addEmployee(e10);
    std::shared_ptr<Employee> e11=std::make_shared<Employee>("Ga",11);
    (*e11).addPosition(rescuerN);
    (*e11).addPosition(rescuerS);
    (*e11).addPosition(driverS);
    (*e11).addPosition(driverN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e11).addDesiredShift(shift1);
    (*e11).addDesiredShift(shift2);
    (*e11).addDesiredShift(shift3);
    (*e11).addDesiredShift(shift4);
    (*e11).addDesiredShift(shift5);
    (*e11).addDesiredShift(shift6);
    (*e11).addDesiredShift(shift7);
    (*e11).addDesiredShift(shift8);
    (*e11).addDesiredShift(shift9);
    (*e11).addDesiredShift(shift10);
    (*e11).addDesiredShift(shift11);
    (*e11).addDesiredShift(shift12);
    (*e11).addDesiredShift(shift13);
    (*e11).addDesiredShift(shift14);
    (*e11).addDesiredShift(shift15);
    (*empRepo).addEmployee(e11);
    std::shared_ptr<Employee> e12=std::make_shared<Employee>("Ga",12);
    (*e12).addPosition(driverN);
    (*e12).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e12).addDesiredShift(shift1);
    (*e12).addDesiredShift(shift2);
    (*e12).addDesiredShift(shift3);
    (*e12).addDesiredShift(shift4);
    (*e12).addDesiredShift(shift5);
    (*e12).addDesiredShift(shift6);
    (*e12).addDesiredShift(shift7);
    (*e12).addDesiredShift(shift8);
    (*e12).addDesiredShift(shift9);
    (*e12).addDesiredShift(shift10);
    (*e12).addDesiredShift(shift11);
    (*e12).addDesiredShift(shift12);
    (*e12).addDesiredShift(shift13);
    (*e12).addDesiredShift(shift14);
    (*e12).addDesiredShift(shift15);
    (*empRepo).addEmployee(e12);
    std::shared_ptr<Employee> e13=std::make_shared<Employee>("Gl",13);
    (*e13).addPosition(driverN);
    (*e13).addPosition(driverS);
    (*e13).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e13).addDesiredShift(shift1);
    (*e13).addDesiredShift(shift2);
    (*e13).addDesiredShift(shift3);
    (*e13).addDesiredShift(shift4);
    (*e13).addDesiredShift(shift5);
    (*e13).addDesiredShift(shift6);
    (*e13).addDesiredShift(shift7);
    (*e13).addDesiredShift(shift8);
    (*e13).addDesiredShift(shift9);
    (*e13).addDesiredShift(shift10);
    (*e13).addDesiredShift(shift11);
    (*e13).addDesiredShift(shift12);
    (*e13).addDesiredShift(shift13);
    (*e13).addDesiredShift(shift14);
    (*e13).addDesiredShift(shift15);
    (*empRepo).addEmployee(e13);
    std::shared_ptr<Employee> e14=std::make_shared<Employee>("Go",14);
    (*e14).addPosition(dispatcher);
    (*e14).addPosition(rescuerN);
    (*e14).addPosition(rescuerS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e14).addDesiredShift(shift1);
    (*e14).addDesiredShift(shift2);
    (*e14).addDesiredShift(shift3);
    (*e14).addDesiredShift(shift4);
    (*e14).addDesiredShift(shift5);
    (*e14).addDesiredShift(shift6);
    (*e14).addDesiredShift(shift7);
    (*e14).addDesiredShift(shift8);
    (*e14).addDesiredShift(shift9);
    (*e14).addDesiredShift(shift10);
    (*e14).addDesiredShift(shift11);
    (*e14).addDesiredShift(shift12);
    (*e14).addDesiredShift(shift13);
    (*e14).addDesiredShift(shift14);
    (*e14).addDesiredShift(shift15);
    (*empRepo).addEmployee(e14);
    std::shared_ptr<Employee> e15=std::make_shared<Employee>("Go",15);
    (*e15).addPosition(rescuerS);
    (*e15).addPosition(rescuerN);
    (*e15).addPosition(driverN);
    (*e15).addPosition(driverS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e15).addDesiredShift(shift1);
    (*e15).addDesiredShift(shift2);
    (*e15).addDesiredShift(shift3);
    (*e15).addDesiredShift(shift4);
    (*e15).addDesiredShift(shift5);
    (*e15).addDesiredShift(shift6);
    (*e15).addDesiredShift(shift7);
    (*e15).addDesiredShift(shift8);
    (*e15).addDesiredShift(shift9);
    (*e15).addDesiredShift(shift10);
    (*e15).addDesiredShift(shift11);
    (*e15).addDesiredShift(shift12);
    (*e15).addDesiredShift(shift13);
    (*e15).addDesiredShift(shift14);
    (*e15).addDesiredShift(shift15);
    (*empRepo).addEmployee(e15);
    std::shared_ptr<Employee> e16=std::make_shared<Employee>("Gu",16);
    (*e16).addPosition(driverN);
    (*e16).addPosition(driverS);
    (*e16).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e16).addDesiredShift(shift1);
    (*e16).addDesiredShift(shift2);
    (*e16).addDesiredShift(shift3);
    (*e16).addDesiredShift(shift4);
    (*e16).addDesiredShift(shift5);
    (*e16).addDesiredShift(shift6);
    (*e16).addDesiredShift(shift7);
    (*e16).addDesiredShift(shift8);
    (*e16).addDesiredShift(shift9);
    (*e16).addDesiredShift(shift10);
    (*e16).addDesiredShift(shift11);
    (*e16).addDesiredShift(shift12);
    (*e16).addDesiredShift(shift13);
    (*e16).addDesiredShift(shift14);
    (*e16).addDesiredShift(shift15);
    (*empRepo).addEmployee(e16);
    std::shared_ptr<Employee> e17=std::make_shared<Employee>("Gu",17);
    (*e17).addPosition(driverN);
    (*e17).addPosition(driverS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e17).addDesiredShift(shift1);
    (*e17).addDesiredShift(shift2);
    (*e17).addDesiredShift(shift3);
    (*e17).addDesiredShift(shift4);
    (*e17).addDesiredShift(shift5);
    (*e17).addDesiredShift(shift6);
    (*e17).addDesiredShift(shift7);
    (*e17).addDesiredShift(shift8);
    (*e17).addDesiredShift(shift9);
    (*e17).addDesiredShift(shift10);
    (*e17).addDesiredShift(shift11);
    (*e17).addDesiredShift(shift12);
    (*e17).addDesiredShift(shift13);
    (*e17).addDesiredShift(shift14);
    (*e17).addDesiredShift(shift15);
    (*empRepo).addEmployee(e17);
    std::shared_ptr<Employee> e18=std::make_shared<Employee>("Hi",18);
    (*e18).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e18).addDesiredShift(shift1);
    (*e18).addDesiredShift(shift2);
    (*e18).addDesiredShift(shift3);
    (*e18).addDesiredShift(shift4);
    (*e18).addDesiredShift(shift5);
    (*e18).addDesiredShift(shift6);
    (*e18).addDesiredShift(shift7);
    (*e18).addDesiredShift(shift8);
    (*e18).addDesiredShift(shift9);
    (*e18).addDesiredShift(shift10);
    (*e18).addDesiredShift(shift11);
    (*e18).addDesiredShift(shift12);
    (*e18).addDesiredShift(shift13);
    (*e18).addDesiredShift(shift14);
    (*e18).addDesiredShift(shift15);
    (*empRepo).addEmployee(e18);
    std::shared_ptr<Employee> e19=std::make_shared<Employee>("Ja",19);
    (*e19).addPosition(driverN);
    (*e19).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e19).addDesiredShift(shift1);
    (*e19).addDesiredShift(shift2);
    (*e19).addDesiredShift(shift3);
    (*e19).addDesiredShift(shift4);
    (*e19).addDesiredShift(shift5);
    (*e19).addDesiredShift(shift6);
    (*e19).addDesiredShift(shift7);
    (*e19).addDesiredShift(shift8);
    (*e19).addDesiredShift(shift9);
    (*e19).addDesiredShift(shift10);
    (*e19).addDesiredShift(shift11);
    (*e19).addDesiredShift(shift12);
    (*e19).addDesiredShift(shift13);
    (*e19).addDesiredShift(shift14);
    (*e19).addDesiredShift(shift15);
    (*empRepo).addEmployee(e19);
    std::shared_ptr<Employee> e20=std::make_shared<Employee>("Ja",20);
    (*e20).addPosition(dispatcher);
    (*e20).addPosition(rescuerS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e20).addDesiredShift(shift1);
    (*e20).addDesiredShift(shift2);
    (*e20).addDesiredShift(shift3);
    (*e20).addDesiredShift(shift4);
    (*e20).addDesiredShift(shift5);
    (*e20).addDesiredShift(shift6);
    (*e20).addDesiredShift(shift7);
    (*e20).addDesiredShift(shift8);
    (*e20).addDesiredShift(shift9);
    (*e20).addDesiredShift(shift10);
    (*e20).addDesiredShift(shift11);
    (*e20).addDesiredShift(shift12);
    (*e20).addDesiredShift(shift13);
    (*e20).addDesiredShift(shift14);
    (*e20).addDesiredShift(shift15);
    (*empRepo).addEmployee(e20);
    std::shared_ptr<Employee> e21=std::make_shared<Employee>("Ja",21);
    (*e21).addPosition(driverS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e21).addDesiredShift(shift1);
    (*e21).addDesiredShift(shift2);
    (*e21).addDesiredShift(shift3);
    (*e21).addDesiredShift(shift4);
    (*e21).addDesiredShift(shift5);
    (*e21).addDesiredShift(shift6);
    (*e21).addDesiredShift(shift7);
    (*e21).addDesiredShift(shift8);
    (*e21).addDesiredShift(shift9);
    (*e21).addDesiredShift(shift10);
    (*e21).addDesiredShift(shift11);
    (*e21).addDesiredShift(shift12);
    (*e21).addDesiredShift(shift13);
    (*e21).addDesiredShift(shift14);
    (*e21).addDesiredShift(shift15);
    (*empRepo).addEmployee(e21);
    std::shared_ptr<Employee> e22=std::make_shared<Employee>("Ja",22);
    (*e22).addPosition(driverS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e22).addDesiredShift(shift1);
    (*e22).addDesiredShift(shift2);
    (*e22).addDesiredShift(shift3);
    (*e22).addDesiredShift(shift4);
    (*e22).addDesiredShift(shift5);
    (*e22).addDesiredShift(shift6);
    (*e22).addDesiredShift(shift7);
    (*e22).addDesiredShift(shift8);
    (*e22).addDesiredShift(shift9);
    (*e22).addDesiredShift(shift10);
    (*e22).addDesiredShift(shift11);
    (*e22).addDesiredShift(shift12);
    (*e22).addDesiredShift(shift13);
    (*e22).addDesiredShift(shift14);
    (*e22).addDesiredShift(shift15);
    (*empRepo).addEmployee(e22);
    std::shared_ptr<Employee> e23=std::make_shared<Employee>("Je",23);
    (*e23).addPosition(driverS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e23).addDesiredShift(shift1);
    (*e23).addDesiredShift(shift2);
    (*e23).addDesiredShift(shift3);
    (*e23).addDesiredShift(shift4);
    (*e23).addDesiredShift(shift5);
    (*e23).addDesiredShift(shift6);
    (*e23).addDesiredShift(shift7);
    (*e23).addDesiredShift(shift8);
    (*e23).addDesiredShift(shift9);
    (*e23).addDesiredShift(shift10);
    (*e23).addDesiredShift(shift11);
    (*e23).addDesiredShift(shift12);
    (*e23).addDesiredShift(shift13);
    (*e23).addDesiredShift(shift14);
    (*e23).addDesiredShift(shift15);
    (*empRepo).addEmployee(e23);
    std::shared_ptr<Employee> e24=std::make_shared<Employee>("Je",24);
    (*e24).addPosition(dispatcher);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e24).addDesiredShift(shift1);
    (*e24).addDesiredShift(shift2);
    (*e24).addDesiredShift(shift3);
    (*e24).addDesiredShift(shift4);
    (*e24).addDesiredShift(shift5);
    (*e24).addDesiredShift(shift6);
    (*e24).addDesiredShift(shift7);
    (*e24).addDesiredShift(shift8);
    (*e24).addDesiredShift(shift9);
    (*e24).addDesiredShift(shift10);
    (*e24).addDesiredShift(shift11);
    (*e24).addDesiredShift(shift12);
    (*e24).addDesiredShift(shift13);
    (*e24).addDesiredShift(shift14);
    (*e24).addDesiredShift(shift15);
    (*empRepo).addEmployee(e24);
    std::shared_ptr<Employee> e25=std::make_shared<Employee>("Je",25);
    (*e25).addPosition(driverN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e25).addDesiredShift(shift1);
    (*e25).addDesiredShift(shift2);
    (*e25).addDesiredShift(shift3);
    (*e25).addDesiredShift(shift4);
    (*e25).addDesiredShift(shift5);
    (*e25).addDesiredShift(shift6);
    (*e25).addDesiredShift(shift7);
    (*e25).addDesiredShift(shift8);
    (*e25).addDesiredShift(shift9);
    (*e25).addDesiredShift(shift10);
    (*e25).addDesiredShift(shift11);
    (*e25).addDesiredShift(shift12);
    (*e25).addDesiredShift(shift13);
    (*e25).addDesiredShift(shift14);
    (*e25).addDesiredShift(shift15);
    (*empRepo).addEmployee(e25);
    std::shared_ptr<Employee> e26=std::make_shared<Employee>("Ka",26);
    (*e26).addPosition(driverN);
    (*e26).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e26).addDesiredShift(shift1);
    (*e26).addDesiredShift(shift2);
    (*e26).addDesiredShift(shift3);
    (*e26).addDesiredShift(shift4);
    (*e26).addDesiredShift(shift5);
    (*e26).addDesiredShift(shift6);
    (*e26).addDesiredShift(shift7);
    (*e26).addDesiredShift(shift8);
    (*e26).addDesiredShift(shift9);
    (*e26).addDesiredShift(shift10);
    (*e26).addDesiredShift(shift11);
    (*e26).addDesiredShift(shift12);
    (*e26).addDesiredShift(shift13);
    (*e26).addDesiredShift(shift14);
    (*e26).addDesiredShift(shift15);
    (*empRepo).addEmployee(e26);
    std::shared_ptr<Employee> e27=std::make_shared<Employee>("Ka",27);
    (*e27).addPosition(medicalRecorder);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e27).addDesiredShift(shift1);
    (*e27).addDesiredShift(shift2);
    (*e27).addDesiredShift(shift3);
    (*e27).addDesiredShift(shift4);
    (*e27).addDesiredShift(shift5);
    (*e27).addDesiredShift(shift6);
    (*e27).addDesiredShift(shift7);
    (*e27).addDesiredShift(shift8);
    (*e27).addDesiredShift(shift9);
    (*e27).addDesiredShift(shift10);
    (*e27).addDesiredShift(shift11);
    (*e27).addDesiredShift(shift12);
    (*e27).addDesiredShift(shift13);
    (*e27).addDesiredShift(shift14);
    (*e27).addDesiredShift(shift15);
    (*empRepo).addEmployee(e27);
    std::shared_ptr<Employee> e28=std::make_shared<Employee>("Ka",28);
    (*e28).addPosition(rescuerN);
    (*e28).addPosition(rescuerS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e28).addDesiredShift(shift1);
    (*e28).addDesiredShift(shift2);
    (*e28).addDesiredShift(shift3);
    (*e28).addDesiredShift(shift4);
    (*e28).addDesiredShift(shift5);
    (*e28).addDesiredShift(shift6);
    (*e28).addDesiredShift(shift7);
    (*e28).addDesiredShift(shift8);
    (*e28).addDesiredShift(shift9);
    (*e28).addDesiredShift(shift10);
    (*e28).addDesiredShift(shift11);
    (*e28).addDesiredShift(shift12);
    (*e28).addDesiredShift(shift13);
    (*e28).addDesiredShift(shift14);
    (*e28).addDesiredShift(shift15);
    (*empRepo).addEmployee(e28);
    std::shared_ptr<Employee> e29=std::make_shared<Employee>("Ko",29);
    (*e29).addPosition(driverN);
    (*e29).addPosition(driverS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e29).addDesiredShift(shift1);
    (*e29).addDesiredShift(shift2);
    (*e29).addDesiredShift(shift3);
    (*e29).addDesiredShift(shift4);
    (*e29).addDesiredShift(shift5);
    (*e29).addDesiredShift(shift6);
    (*e29).addDesiredShift(shift7);
    (*e29).addDesiredShift(shift8);
    (*e29).addDesiredShift(shift9);
    (*e29).addDesiredShift(shift10);
    (*e29).addDesiredShift(shift11);
    (*e29).addDesiredShift(shift12);
    (*e29).addDesiredShift(shift13);
    (*e29).addDesiredShift(shift14);
    (*e29).addDesiredShift(shift15);
    (*empRepo).addEmployee(e29);
    std::shared_ptr<Employee> e30=std::make_shared<Employee>("Ko",30);
    (*e30).addPosition(rescuerS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(17,24,24));
    shift12.reset(new Shift(0,7,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e30).addDesiredShift(shift1);
    (*e30).addDesiredShift(shift2);
    (*e30).addDesiredShift(shift3);
    (*e30).addDesiredShift(shift4);
    (*e30).addDesiredShift(shift5);
    (*e30).addDesiredShift(shift6);
    (*e30).addDesiredShift(shift7);
    (*e30).addDesiredShift(shift8);
    (*e30).addDesiredShift(shift9);
    (*e30).addDesiredShift(shift10);
    (*e30).addDesiredShift(shift11);
    (*e30).addDesiredShift(shift12);
    (*e30).addDesiredShift(shift13);
    (*e30).addDesiredShift(shift14);
    (*e30).addDesiredShift(shift15);
    (*empRepo).addEmployee(e30);
    std::shared_ptr<Employee> e31=std::make_shared<Employee>("Kr",31);
    (*e31).addPosition(dispatcher);
    (*e31).addPosition(driverS);
    (*e31).addPosition(rescuerS);
    (*e31).addPosition(driverN);
    (*e31).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e31).addDesiredShift(shift1);
    (*e31).addDesiredShift(shift2);
    (*e31).addDesiredShift(shift3);
    (*e31).addDesiredShift(shift4);
    (*e31).addDesiredShift(shift5);
    (*e31).addDesiredShift(shift6);
    (*e31).addDesiredShift(shift7);
    (*e31).addDesiredShift(shift8);
    (*e31).addDesiredShift(shift9);
    (*e31).addDesiredShift(shift10);
    (*e31).addDesiredShift(shift11);
    (*e31).addDesiredShift(shift12);
    (*e31).addDesiredShift(shift13);
    (*e31).addDesiredShift(shift14);
    (*e31).addDesiredShift(shift15);
    (*empRepo).addEmployee(e31);
    std::shared_ptr<Employee> e32=std::make_shared<Employee>("Ku",32);
    (*e32).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(17,24,24));
    shift12.reset(new Shift(0,7,25));
    shift13.reset(new Shift(0,11,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e32).addDesiredShift(shift1);
    (*e32).addDesiredShift(shift2);
    (*e32).addDesiredShift(shift3);
    (*e32).addDesiredShift(shift4);
    (*e32).addDesiredShift(shift5);
    (*e32).addDesiredShift(shift6);
    (*e32).addDesiredShift(shift7);
    (*e32).addDesiredShift(shift8);
    (*e32).addDesiredShift(shift9);
    (*e32).addDesiredShift(shift10);
    (*e32).addDesiredShift(shift11);
    (*e32).addDesiredShift(shift12);
    (*e32).addDesiredShift(shift13);
    (*e32).addDesiredShift(shift14);
    (*e32).addDesiredShift(shift15);
    (*empRepo).addEmployee(e32);
    std::shared_ptr<Employee> e33=std::make_shared<Employee>("Ku",33);
    (*e33).addPosition(driverS);
    (*e33).addPosition(rescuerS);
    (*e33).addPosition(dispatcher);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e33).addDesiredShift(shift1);
    (*e33).addDesiredShift(shift2);
    (*e33).addDesiredShift(shift3);
    (*e33).addDesiredShift(shift4);
    (*e33).addDesiredShift(shift5);
    (*e33).addDesiredShift(shift6);
    (*e33).addDesiredShift(shift7);
    (*e33).addDesiredShift(shift8);
    (*e33).addDesiredShift(shift9);
    (*e33).addDesiredShift(shift10);
    (*e33).addDesiredShift(shift11);
    (*e33).addDesiredShift(shift12);
    (*e33).addDesiredShift(shift13);
    (*e33).addDesiredShift(shift14);
    (*e33).addDesiredShift(shift15);
    (*empRepo).addEmployee(e33);
    std::shared_ptr<Employee> e34=std::make_shared<Employee>("Kw",34);
    (*e34).addPosition(driverN);
    (*e34).addPosition(rescuerN);
    (*e34).addPosition(dispatcher);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e34).addDesiredShift(shift1);
    (*e34).addDesiredShift(shift2);
    (*e34).addDesiredShift(shift3);
    (*e34).addDesiredShift(shift4);
    (*e34).addDesiredShift(shift5);
    (*e34).addDesiredShift(shift6);
    (*e34).addDesiredShift(shift7);
    (*e34).addDesiredShift(shift8);
    (*e34).addDesiredShift(shift9);
    (*e34).addDesiredShift(shift10);
    (*e34).addDesiredShift(shift11);
    (*e34).addDesiredShift(shift12);
    (*e34).addDesiredShift(shift13);
    (*e34).addDesiredShift(shift14);
    (*e34).addDesiredShift(shift15);
    (*empRepo).addEmployee(e34);
    std::shared_ptr<Employee> e35=std::make_shared<Employee>("Kw",35);
    (*e35).addPosition(rescuerN);
    (*e35).addPosition(rescuerS);
    (*e35).addPosition(dispatcher);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e35).addDesiredShift(shift1);
    (*e35).addDesiredShift(shift2);
    (*e35).addDesiredShift(shift3);
    (*e35).addDesiredShift(shift4);
    (*e35).addDesiredShift(shift5);
    (*e35).addDesiredShift(shift6);
    (*e35).addDesiredShift(shift7);
    (*e35).addDesiredShift(shift8);
    (*e35).addDesiredShift(shift9);
    (*e35).addDesiredShift(shift10);
    (*e35).addDesiredShift(shift11);
    (*e35).addDesiredShift(shift12);
    (*e35).addDesiredShift(shift13);
    (*e35).addDesiredShift(shift14);
    (*e35).addDesiredShift(shift15);
    (*empRepo).addEmployee(e35);
    std::shared_ptr<Employee> e36=std::make_shared<Employee>("La",36);
    (*e36).addPosition(rescuerN);
    (*e36).addPosition(rescuerS);
    (*e36).addPosition(driverN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e36).addDesiredShift(shift1);
    (*e36).addDesiredShift(shift2);
    (*e36).addDesiredShift(shift3);
    (*e36).addDesiredShift(shift4);
    (*e36).addDesiredShift(shift5);
    (*e36).addDesiredShift(shift6);
    (*e36).addDesiredShift(shift7);
    (*e36).addDesiredShift(shift8);
    (*e36).addDesiredShift(shift9);
    (*e36).addDesiredShift(shift10);
    (*e36).addDesiredShift(shift11);
    (*e36).addDesiredShift(shift12);
    (*e36).addDesiredShift(shift13);
    (*e36).addDesiredShift(shift14);
    (*e36).addDesiredShift(shift15);
    (*empRepo).addEmployee(e36);
    std::shared_ptr<Employee> e37=std::make_shared<Employee>("Le",37);
    (*e37).addPosition(rescuerN);
    (*e37).addPosition(driverN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e37).addDesiredShift(shift1);
    (*e37).addDesiredShift(shift2);
    (*e37).addDesiredShift(shift3);
    (*e37).addDesiredShift(shift4);
    (*e37).addDesiredShift(shift5);
    (*e37).addDesiredShift(shift6);
    (*e37).addDesiredShift(shift7);
    (*e37).addDesiredShift(shift8);
    (*e37).addDesiredShift(shift9);
    (*e37).addDesiredShift(shift10);
    (*e37).addDesiredShift(shift11);
    (*e37).addDesiredShift(shift12);
    (*e37).addDesiredShift(shift13);
    (*e37).addDesiredShift(shift14);
    (*e37).addDesiredShift(shift15);
    (*empRepo).addEmployee(e37);
    std::shared_ptr<Employee> e38=std::make_shared<Employee>("Ma",38);
    (*e38).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e38).addDesiredShift(shift1);
    (*e38).addDesiredShift(shift2);
    (*e38).addDesiredShift(shift3);
    (*e38).addDesiredShift(shift4);
    (*e38).addDesiredShift(shift5);
    (*e38).addDesiredShift(shift6);
    (*e38).addDesiredShift(shift7);
    (*e38).addDesiredShift(shift8);
    (*e38).addDesiredShift(shift9);
    (*e38).addDesiredShift(shift10);
    (*e38).addDesiredShift(shift11);
    (*e38).addDesiredShift(shift12);
    (*e38).addDesiredShift(shift13);
    (*e38).addDesiredShift(shift14);
    (*e38).addDesiredShift(shift15);
    (*empRepo).addEmployee(e38);
    std::shared_ptr<Employee> e39=std::make_shared<Employee>("No",39);
    (*e39).addPosition(driverS);
    (*e39).addPosition(driverN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e39).addDesiredShift(shift1);
    (*e39).addDesiredShift(shift2);
    (*e39).addDesiredShift(shift3);
    (*e39).addDesiredShift(shift4);
    (*e39).addDesiredShift(shift5);
    (*e39).addDesiredShift(shift6);
    (*e39).addDesiredShift(shift7);
    (*e39).addDesiredShift(shift8);
    (*e39).addDesiredShift(shift9);
    (*e39).addDesiredShift(shift10);
    (*e39).addDesiredShift(shift11);
    (*e39).addDesiredShift(shift12);
    (*e39).addDesiredShift(shift13);
    (*e39).addDesiredShift(shift14);
    (*e39).addDesiredShift(shift15);
    (*empRepo).addEmployee(e39);
    std::shared_ptr<Employee> e40=std::make_shared<Employee>("No",40);
    (*e40).addPosition(driverS);
    (*e40).addPosition(driverN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e40).addDesiredShift(shift1);
    (*e40).addDesiredShift(shift2);
    (*e40).addDesiredShift(shift3);
    (*e40).addDesiredShift(shift4);
    (*e40).addDesiredShift(shift5);
    (*e40).addDesiredShift(shift6);
    (*e40).addDesiredShift(shift7);
    (*e40).addDesiredShift(shift8);
    (*e40).addDesiredShift(shift9);
    (*e40).addDesiredShift(shift10);
    (*e40).addDesiredShift(shift11);
    (*e40).addDesiredShift(shift12);
    (*e40).addDesiredShift(shift13);
    (*e40).addDesiredShift(shift14);
    (*e40).addDesiredShift(shift15);
    (*empRepo).addEmployee(e40);
    std::shared_ptr<Employee> e41=std::make_shared<Employee>("Ni",41);
    (*e41).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e41).addDesiredShift(shift1);
    (*e41).addDesiredShift(shift2);
    (*e41).addDesiredShift(shift3);
    (*e41).addDesiredShift(shift4);
    (*e41).addDesiredShift(shift5);
    (*e41).addDesiredShift(shift6);
    (*e41).addDesiredShift(shift7);
    (*e41).addDesiredShift(shift8);
    (*e41).addDesiredShift(shift9);
    (*e41).addDesiredShift(shift10);
    (*e41).addDesiredShift(shift11);
    (*e41).addDesiredShift(shift12);
    (*e41).addDesiredShift(shift13);
    (*e41).addDesiredShift(shift14);
    (*e41).addDesiredShift(shift15);
    (*empRepo).addEmployee(e41);
    std::shared_ptr<Employee> e42=std::make_shared<Employee>("Ol",42);
    (*e42).addPosition(rescuerS);
    (*e42).addPosition(dispatcher);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e42).addDesiredShift(shift1);
    (*e42).addDesiredShift(shift2);
    (*e42).addDesiredShift(shift3);
    (*e42).addDesiredShift(shift4);
    (*e42).addDesiredShift(shift5);
    (*e42).addDesiredShift(shift6);
    (*e42).addDesiredShift(shift7);
    (*e42).addDesiredShift(shift8);
    (*e42).addDesiredShift(shift9);
    (*e42).addDesiredShift(shift10);
    (*e42).addDesiredShift(shift11);
    (*e42).addDesiredShift(shift12);
    (*e42).addDesiredShift(shift13);
    (*e42).addDesiredShift(shift14);
    (*e42).addDesiredShift(shift15);
    (*empRepo).addEmployee(e42);
    std::shared_ptr<Employee> e43=std::make_shared<Employee>("Os",43);
    (*e43).addPosition(driverN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e43).addDesiredShift(shift1);
    (*e43).addDesiredShift(shift2);
    (*e43).addDesiredShift(shift3);
    (*e43).addDesiredShift(shift4);
    (*e43).addDesiredShift(shift5);
    (*e43).addDesiredShift(shift6);
    (*e43).addDesiredShift(shift7);
    (*e43).addDesiredShift(shift8);
    (*e43).addDesiredShift(shift9);
    (*e43).addDesiredShift(shift10);
    (*e43).addDesiredShift(shift11);
    (*e43).addDesiredShift(shift12);
    (*e43).addDesiredShift(shift13);
    (*e43).addDesiredShift(shift14);
    (*e43).addDesiredShift(shift15);
    (*empRepo).addEmployee(e43);
    std::shared_ptr<Employee> e44=std::make_shared<Employee>("Pa",44);
    (*e44).addPosition(driverN);
    (*e44).addPosition(rescuerS);
    (*e44).addPosition(rescuerN);
    (*e44).addPosition(driverS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e44).addDesiredShift(shift1);
    (*e44).addDesiredShift(shift2);
    (*e44).addDesiredShift(shift3);
    (*e44).addDesiredShift(shift4);
    (*e44).addDesiredShift(shift5);
    (*e44).addDesiredShift(shift6);
    (*e44).addDesiredShift(shift7);
    (*e44).addDesiredShift(shift8);
    (*e44).addDesiredShift(shift9);
    (*e44).addDesiredShift(shift10);
    (*e44).addDesiredShift(shift11);
    (*e44).addDesiredShift(shift12);
    (*e44).addDesiredShift(shift13);
    (*e44).addDesiredShift(shift14);
    (*e44).addDesiredShift(shift15);
    (*empRepo).addEmployee(e44);
    std::shared_ptr<Employee> e45=std::make_shared<Employee>("Pa",45);
    (*e45).addPosition(driverS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e45).addDesiredShift(shift1);
    (*e45).addDesiredShift(shift2);
    (*e45).addDesiredShift(shift3);
    (*e45).addDesiredShift(shift4);
    (*e45).addDesiredShift(shift5);
    (*e45).addDesiredShift(shift6);
    (*e45).addDesiredShift(shift7);
    (*e45).addDesiredShift(shift8);
    (*e45).addDesiredShift(shift9);
    (*e45).addDesiredShift(shift10);
    (*e45).addDesiredShift(shift11);
    (*e45).addDesiredShift(shift12);
    (*e45).addDesiredShift(shift13);
    (*e45).addDesiredShift(shift14);
    (*e45).addDesiredShift(shift15);
    (*empRepo).addEmployee(e45);
    std::shared_ptr<Employee> e46=std::make_shared<Employee>("Pa",46);
    (*e46).addPosition(driverN);
    (*e46).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e46).addDesiredShift(shift1);
    (*e46).addDesiredShift(shift2);
    (*e46).addDesiredShift(shift3);
    (*e46).addDesiredShift(shift4);
    (*e46).addDesiredShift(shift5);
    (*e46).addDesiredShift(shift6);
    (*e46).addDesiredShift(shift7);
    (*e46).addDesiredShift(shift8);
    (*e46).addDesiredShift(shift9);
    (*e46).addDesiredShift(shift10);
    (*e46).addDesiredShift(shift11);
    (*e46).addDesiredShift(shift12);
    (*e46).addDesiredShift(shift13);
    (*e46).addDesiredShift(shift14);
    (*e46).addDesiredShift(shift15);
    (*empRepo).addEmployee(e46);
    std::shared_ptr<Employee> e47=std::make_shared<Employee>("Pi",47);
    (*e47).addPosition(driverN);
    (*e47).addPosition(driverS);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e47).addDesiredShift(shift1);
    (*e47).addDesiredShift(shift2);
    (*e47).addDesiredShift(shift3);
    (*e47).addDesiredShift(shift4);
    (*e47).addDesiredShift(shift5);
    (*e47).addDesiredShift(shift6);
    (*e47).addDesiredShift(shift7);
    (*e47).addDesiredShift(shift8);
    (*e47).addDesiredShift(shift9);
    (*e47).addDesiredShift(shift10);
    (*e47).addDesiredShift(shift11);
    (*e47).addDesiredShift(shift12);
    (*e47).addDesiredShift(shift13);
    (*e47).addDesiredShift(shift14);
    (*e47).addDesiredShift(shift15);
    (*empRepo).addEmployee(e47);
    std::shared_ptr<Employee> e48=std::make_shared<Employee>("Pi",48);
    (*e48).addPosition(rescuerS);
    (*e48).addPosition(rescuerN);
    (*e48).addPosition(dispatcher);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e48).addDesiredShift(shift1);
    (*e48).addDesiredShift(shift2);
    (*e48).addDesiredShift(shift3);
    (*e48).addDesiredShift(shift4);
    (*e48).addDesiredShift(shift5);
    (*e48).addDesiredShift(shift6);
    (*e48).addDesiredShift(shift7);
    (*e48).addDesiredShift(shift8);
    (*e48).addDesiredShift(shift9);
    (*e48).addDesiredShift(shift10);
    (*e48).addDesiredShift(shift11);
    (*e48).addDesiredShift(shift12);
    (*e48).addDesiredShift(shift13);
    (*e48).addDesiredShift(shift14);
    (*e48).addDesiredShift(shift15);
    (*empRepo).addEmployee(e48);
    std::shared_ptr<Employee> e49=std::make_shared<Employee>("Po",49);
    (*e49).addPosition(rescuerN);
    (*e49).addPosition(rescuerS);
    (*e49).addPosition(driverS);
    (*e49).addPosition(driverN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e49).addDesiredShift(shift1);
    (*e49).addDesiredShift(shift2);
    (*e49).addDesiredShift(shift3);
    (*e49).addDesiredShift(shift4);
    (*e49).addDesiredShift(shift5);
    (*e49).addDesiredShift(shift6);
    (*e49).addDesiredShift(shift7);
    (*e49).addDesiredShift(shift8);
    (*e49).addDesiredShift(shift9);
    (*e49).addDesiredShift(shift10);
    (*e49).addDesiredShift(shift11);
    (*e49).addDesiredShift(shift12);
    (*e49).addDesiredShift(shift13);
    (*e49).addDesiredShift(shift14);
    (*e49).addDesiredShift(shift15);
    (*empRepo).addEmployee(e49);
    std::shared_ptr<Employee> e50=std::make_shared<Employee>("Pu",50);
    (*e50).addPosition(rescuerN);
    (*e50).addPosition(driverS);
    (*e50).addPosition(driverN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e50).addDesiredShift(shift1);
    (*e50).addDesiredShift(shift2);
    (*e50).addDesiredShift(shift3);
    (*e50).addDesiredShift(shift4);
    (*e50).addDesiredShift(shift5);
    (*e50).addDesiredShift(shift6);
    (*e50).addDesiredShift(shift7);
    (*e50).addDesiredShift(shift8);
    (*e50).addDesiredShift(shift9);
    (*e50).addDesiredShift(shift10);
    (*e50).addDesiredShift(shift11);
    (*e50).addDesiredShift(shift12);
    (*e50).addDesiredShift(shift13);
    (*e50).addDesiredShift(shift14);
    (*e50).addDesiredShift(shift15);
    (*empRepo).addEmployee(e50);
    std::shared_ptr<Employee> e51=std::make_shared<Employee>("Re",51);
    (*e51).addPosition(rescuerS);
    (*e51).addPosition(dispatcher);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e51).addDesiredShift(shift1);
    (*e51).addDesiredShift(shift2);
    (*e51).addDesiredShift(shift3);
    (*e51).addDesiredShift(shift4);
    (*e51).addDesiredShift(shift5);
    (*e51).addDesiredShift(shift6);
    (*e51).addDesiredShift(shift7);
    (*e51).addDesiredShift(shift8);
    (*e51).addDesiredShift(shift9);
    (*e51).addDesiredShift(shift10);
    (*e51).addDesiredShift(shift11);
    (*e51).addDesiredShift(shift12);
    (*e51).addDesiredShift(shift13);
    (*e51).addDesiredShift(shift14);
    (*e51).addDesiredShift(shift15);
    (*empRepo).addEmployee(e51);
    std::shared_ptr<Employee> e52=std::make_shared<Employee>("Ro",52);
    (*e52).addPosition(rescuerN);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e52).addDesiredShift(shift1);
    (*e52).addDesiredShift(shift2);
    (*e52).addDesiredShift(shift3);
    (*e52).addDesiredShift(shift4);
    (*e52).addDesiredShift(shift5);
    (*e52).addDesiredShift(shift6);
    (*e52).addDesiredShift(shift7);
    (*e52).addDesiredShift(shift8);
    (*e52).addDesiredShift(shift9);
    (*e52).addDesiredShift(shift10);
    (*e52).addDesiredShift(shift11);
    (*e52).addDesiredShift(shift12);
    (*e52).addDesiredShift(shift13);
    (*e52).addDesiredShift(shift14);
    (*e52).addDesiredShift(shift15);
    (*empRepo).addEmployee(e52);


    std::shared_ptr<Employee> e87=std::make_shared<Employee>("Sw",87);
    (*e87).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e87).addDesiredShift(shift1);
    (*e87).addDesiredShift(shift2);
    (*e87).addDesiredShift(shift3);
    (*e87).addDesiredShift(shift4);
    (*e87).addDesiredShift(shift5);
    (*e87).addDesiredShift(shift6);
    (*e87).addDesiredShift(shift7);
    (*e87).addDesiredShift(shift8);
    (*e87).addDesiredShift(shift9);
    (*e87).addDesiredShift(shift10);
    (*e87).addDesiredShift(shift11);
    (*e87).addDesiredShift(shift12);
    (*e87).addDesiredShift(shift13);
    (*e87).addDesiredShift(shift14);
    (*e87).addDesiredShift(shift15);
    (*empRepo).addEmployee(e87);
    std::shared_ptr<Employee> e88=std::make_shared<Employee>("Po",88);
    (*e88).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e88).addDesiredShift(shift1);
    (*e88).addDesiredShift(shift2);
    (*e88).addDesiredShift(shift3);
    (*e88).addDesiredShift(shift4);
    (*e88).addDesiredShift(shift5);
    (*e88).addDesiredShift(shift6);
    (*e88).addDesiredShift(shift7);
    (*e88).addDesiredShift(shift8);
    (*e88).addDesiredShift(shift9);
    (*e88).addDesiredShift(shift10);
    (*e88).addDesiredShift(shift11);
    (*e88).addDesiredShift(shift12);
    (*e88).addDesiredShift(shift13);
    (*e88).addDesiredShift(shift14);
    (*e88).addDesiredShift(shift15);
    (*empRepo).addEmployee(e88);
    std::shared_ptr<Employee> e89=std::make_shared<Employee>("Ka",89);
    (*e89).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e89).addDesiredShift(shift1);
    (*e89).addDesiredShift(shift2);
    (*e89).addDesiredShift(shift3);
    (*e89).addDesiredShift(shift4);
    (*e89).addDesiredShift(shift5);
    (*e89).addDesiredShift(shift6);
    (*e89).addDesiredShift(shift7);
    (*e89).addDesiredShift(shift8);
    (*e89).addDesiredShift(shift9);
    (*e89).addDesiredShift(shift10);
    (*e89).addDesiredShift(shift11);
    (*e89).addDesiredShift(shift12);
    (*e89).addDesiredShift(shift13);
    (*e89).addDesiredShift(shift14);
    (*e89).addDesiredShift(shift15);
    (*empRepo).addEmployee(e89);
    std::shared_ptr<Employee> e90=std::make_shared<Employee>("Zg",90);
    (*e90).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e90).addDesiredShift(shift1);
    (*e90).addDesiredShift(shift2);
    (*e90).addDesiredShift(shift3);
    (*e90).addDesiredShift(shift4);
    (*e90).addDesiredShift(shift5);
    (*e90).addDesiredShift(shift6);
    (*e90).addDesiredShift(shift7);
    (*e90).addDesiredShift(shift8);
    (*e90).addDesiredShift(shift9);
    (*e90).addDesiredShift(shift10);
    (*e90).addDesiredShift(shift11);
    (*e90).addDesiredShift(shift12);
    (*e90).addDesiredShift(shift13);
    (*e90).addDesiredShift(shift14);
    (*e90).addDesiredShift(shift15);
    (*empRepo).addEmployee(e90);
    std::shared_ptr<Employee> e91=std::make_shared<Employee>("Ja",91);
    (*e91).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e91).addDesiredShift(shift1);
    (*e91).addDesiredShift(shift2);
    (*e91).addDesiredShift(shift3);
    (*e91).addDesiredShift(shift4);
    (*e91).addDesiredShift(shift5);
    (*e91).addDesiredShift(shift6);
    (*e91).addDesiredShift(shift7);
    (*e91).addDesiredShift(shift8);
    (*e91).addDesiredShift(shift9);
    (*e91).addDesiredShift(shift10);
    (*e91).addDesiredShift(shift11);
    (*e91).addDesiredShift(shift12);
    (*e91).addDesiredShift(shift13);
    (*e91).addDesiredShift(shift14);
    (*e91).addDesiredShift(shift15);
    (*empRepo).addEmployee(e91);
    std::shared_ptr<Employee> e92=std::make_shared<Employee>("Zi",92);
    (*e92).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e92).addDesiredShift(shift1);
    (*e92).addDesiredShift(shift2);
    (*e92).addDesiredShift(shift3);
    (*e92).addDesiredShift(shift4);
    (*e92).addDesiredShift(shift5);
    (*e92).addDesiredShift(shift6);
    (*e92).addDesiredShift(shift7);
    (*e92).addDesiredShift(shift8);
    (*e92).addDesiredShift(shift9);
    (*e92).addDesiredShift(shift10);
    (*e92).addDesiredShift(shift11);
    (*e92).addDesiredShift(shift12);
    (*e92).addDesiredShift(shift13);
    (*e92).addDesiredShift(shift14);
    (*e92).addDesiredShift(shift15);
    (*empRepo).addEmployee(e92);
    std::shared_ptr<Employee> e93=std::make_shared<Employee>("Ni",93);
    (*e93).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e93).addDesiredShift(shift1);
    (*e93).addDesiredShift(shift2);
    (*e93).addDesiredShift(shift3);
    (*e93).addDesiredShift(shift4);
    (*e93).addDesiredShift(shift5);
    (*e93).addDesiredShift(shift6);
    (*e93).addDesiredShift(shift7);
    (*e93).addDesiredShift(shift8);
    (*e93).addDesiredShift(shift9);
    (*e93).addDesiredShift(shift10);
    (*e93).addDesiredShift(shift11);
    (*e93).addDesiredShift(shift12);
    (*e93).addDesiredShift(shift13);
    (*e93).addDesiredShift(shift14);
    (*e93).addDesiredShift(shift15);
    (*empRepo).addEmployee(e93);
    std::shared_ptr<Employee> e94=std::make_shared<Employee>("Kr",94);
    (*e94).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e94).addDesiredShift(shift1);
    (*e94).addDesiredShift(shift2);
    (*e94).addDesiredShift(shift3);
    (*e94).addDesiredShift(shift4);
    (*e94).addDesiredShift(shift5);
    (*e94).addDesiredShift(shift6);
    (*e94).addDesiredShift(shift7);
    (*e94).addDesiredShift(shift8);
    (*e94).addDesiredShift(shift9);
    (*e94).addDesiredShift(shift10);
    (*e94).addDesiredShift(shift11);
    (*e94).addDesiredShift(shift12);
    (*e94).addDesiredShift(shift13);
    (*e94).addDesiredShift(shift14);
    (*e94).addDesiredShift(shift15);
    (*empRepo).addEmployee(e94);
    std::shared_ptr<Employee> e95=std::make_shared<Employee>("So",95);
    (*e95).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e95).addDesiredShift(shift1);
    (*e95).addDesiredShift(shift2);
    (*e95).addDesiredShift(shift3);
    (*e95).addDesiredShift(shift4);
    (*e95).addDesiredShift(shift5);
    (*e95).addDesiredShift(shift6);
    (*e95).addDesiredShift(shift7);
    (*e95).addDesiredShift(shift8);
    (*e95).addDesiredShift(shift9);
    (*e95).addDesiredShift(shift10);
    (*e95).addDesiredShift(shift11);
    (*e95).addDesiredShift(shift12);
    (*e95).addDesiredShift(shift13);
    (*e95).addDesiredShift(shift14);
    (*e95).addDesiredShift(shift15);
    (*empRepo).addEmployee(e95);
    std::shared_ptr<Employee> e96=std::make_shared<Employee>("No",96);
    (*e96).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e96).addDesiredShift(shift1);
    (*e96).addDesiredShift(shift2);
    (*e96).addDesiredShift(shift3);
    (*e96).addDesiredShift(shift4);
    (*e96).addDesiredShift(shift5);
    (*e96).addDesiredShift(shift6);
    (*e96).addDesiredShift(shift7);
    (*e96).addDesiredShift(shift8);
    (*e96).addDesiredShift(shift9);
    (*e96).addDesiredShift(shift10);
    (*e96).addDesiredShift(shift11);
    (*e96).addDesiredShift(shift12);
    (*e96).addDesiredShift(shift13);
    (*e96).addDesiredShift(shift14);
    (*e96).addDesiredShift(shift15);
    (*empRepo).addEmployee(e96);
    std::shared_ptr<Employee> e97=std::make_shared<Employee>("Ku",97);
    (*e97).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e97).addDesiredShift(shift1);
    (*e97).addDesiredShift(shift2);
    (*e97).addDesiredShift(shift3);
    (*e97).addDesiredShift(shift4);
    (*e97).addDesiredShift(shift5);
    (*e97).addDesiredShift(shift6);
    (*e97).addDesiredShift(shift7);
    (*e97).addDesiredShift(shift8);
    (*e97).addDesiredShift(shift9);
    (*e97).addDesiredShift(shift10);
    (*e97).addDesiredShift(shift11);
    (*e97).addDesiredShift(shift12);
    (*e97).addDesiredShift(shift13);
    (*e97).addDesiredShift(shift14);
    (*e97).addDesiredShift(shift15);
    (*empRepo).addEmployee(e97);
    std::shared_ptr<Employee> e98=std::make_shared<Employee>("Ci",98);
    (*e98).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e98).addDesiredShift(shift1);
    (*e98).addDesiredShift(shift2);
    (*e98).addDesiredShift(shift3);
    (*e98).addDesiredShift(shift4);
    (*e98).addDesiredShift(shift5);
    (*e98).addDesiredShift(shift6);
    (*e98).addDesiredShift(shift7);
    (*e98).addDesiredShift(shift8);
    (*e98).addDesiredShift(shift9);
    (*e98).addDesiredShift(shift10);
    (*e98).addDesiredShift(shift11);
    (*e98).addDesiredShift(shift12);
    (*e98).addDesiredShift(shift13);
    (*e98).addDesiredShift(shift14);
    (*e98).addDesiredShift(shift15);
    (*empRepo).addEmployee(e98);
    std::shared_ptr<Employee> e99=std::make_shared<Employee>("Kr",99);
    (*e99).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e99).addDesiredShift(shift1);
    (*e99).addDesiredShift(shift2);
    (*e99).addDesiredShift(shift3);
    (*e99).addDesiredShift(shift4);
    (*e99).addDesiredShift(shift5);
    (*e99).addDesiredShift(shift6);
    (*e99).addDesiredShift(shift7);
    (*e99).addDesiredShift(shift8);
    (*e99).addDesiredShift(shift9);
    (*e99).addDesiredShift(shift10);
    (*e99).addDesiredShift(shift11);
    (*e99).addDesiredShift(shift12);
    (*e99).addDesiredShift(shift13);
    (*e99).addDesiredShift(shift14);
    (*e99).addDesiredShift(shift15);
    (*empRepo).addEmployee(e99);
    std::shared_ptr<Employee> e100=std::make_shared<Employee>("Dr",100);
    (*e100).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e100).addDesiredShift(shift1);
    (*e100).addDesiredShift(shift2);
    (*e100).addDesiredShift(shift3);
    (*e100).addDesiredShift(shift4);
    (*e100).addDesiredShift(shift5);
    (*e100).addDesiredShift(shift6);
    (*e100).addDesiredShift(shift7);
    (*e100).addDesiredShift(shift8);
    (*e100).addDesiredShift(shift9);
    (*e100).addDesiredShift(shift10);
    (*e100).addDesiredShift(shift11);
    (*e100).addDesiredShift(shift12);
    (*e100).addDesiredShift(shift13);
    (*e100).addDesiredShift(shift14);
    (*e100).addDesiredShift(shift15);
    (*empRepo).addEmployee(e100);
    std::shared_ptr<Employee> e101=std::make_shared<Employee>("Go",101);
    (*e101).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e101).addDesiredShift(shift1);
    (*e101).addDesiredShift(shift2);
    (*e101).addDesiredShift(shift3);
    (*e101).addDesiredShift(shift4);
    (*e101).addDesiredShift(shift5);
    (*e101).addDesiredShift(shift6);
    (*e101).addDesiredShift(shift7);
    (*e101).addDesiredShift(shift8);
    (*e101).addDesiredShift(shift9);
    (*e101).addDesiredShift(shift10);
    (*e101).addDesiredShift(shift11);
    (*e101).addDesiredShift(shift12);
    (*e101).addDesiredShift(shift13);
    (*e101).addDesiredShift(shift14);
    (*e101).addDesiredShift(shift15);
    (*empRepo).addEmployee(e101);
    std::shared_ptr<Employee> e102=std::make_shared<Employee>("Fe",102);
    (*e102).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e102).addDesiredShift(shift1);
    (*e102).addDesiredShift(shift2);
    (*e102).addDesiredShift(shift3);
    (*e102).addDesiredShift(shift4);
    (*e102).addDesiredShift(shift5);
    (*e102).addDesiredShift(shift6);
    (*e102).addDesiredShift(shift7);
    (*e102).addDesiredShift(shift8);
    (*e102).addDesiredShift(shift9);
    (*e102).addDesiredShift(shift10);
    (*e102).addDesiredShift(shift11);
    (*e102).addDesiredShift(shift12);
    (*e102).addDesiredShift(shift13);
    (*e102).addDesiredShift(shift14);
    (*e102).addDesiredShift(shift15);
    (*empRepo).addEmployee(e102);
    std::shared_ptr<Employee> e103=std::make_shared<Employee>("Ko",103);
    (*e103).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e103).addDesiredShift(shift1);
    (*e103).addDesiredShift(shift2);
    (*e103).addDesiredShift(shift3);
    (*e103).addDesiredShift(shift4);
    (*e103).addDesiredShift(shift5);
    (*e103).addDesiredShift(shift6);
    (*e103).addDesiredShift(shift7);
    (*e103).addDesiredShift(shift8);
    (*e103).addDesiredShift(shift9);
    (*e103).addDesiredShift(shift10);
    (*e103).addDesiredShift(shift11);
    (*e103).addDesiredShift(shift12);
    (*e103).addDesiredShift(shift13);
    (*e103).addDesiredShift(shift14);
    (*e103).addDesiredShift(shift15);
    (*empRepo).addEmployee(e103);
    std::shared_ptr<Employee> e104=std::make_shared<Employee>("Mi",104);
    (*e104).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e104).addDesiredShift(shift1);
    (*e104).addDesiredShift(shift2);
    (*e104).addDesiredShift(shift3);
    (*e104).addDesiredShift(shift4);
    (*e104).addDesiredShift(shift5);
    (*e104).addDesiredShift(shift6);
    (*e104).addDesiredShift(shift7);
    (*e104).addDesiredShift(shift8);
    (*e104).addDesiredShift(shift9);
    (*e104).addDesiredShift(shift10);
    (*e104).addDesiredShift(shift11);
    (*e104).addDesiredShift(shift12);
    (*e104).addDesiredShift(shift13);
    (*e104).addDesiredShift(shift14);
    (*e104).addDesiredShift(shift15);
    (*empRepo).addEmployee(e104);
    std::shared_ptr<Employee> e105=std::make_shared<Employee>("Sk",105);
    (*e105).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e105).addDesiredShift(shift1);
    (*e105).addDesiredShift(shift2);
    (*e105).addDesiredShift(shift3);
    (*e105).addDesiredShift(shift4);
    (*e105).addDesiredShift(shift5);
    (*e105).addDesiredShift(shift6);
    (*e105).addDesiredShift(shift7);
    (*e105).addDesiredShift(shift8);
    (*e105).addDesiredShift(shift9);
    (*e105).addDesiredShift(shift10);
    (*e105).addDesiredShift(shift11);
    (*e105).addDesiredShift(shift12);
    (*e105).addDesiredShift(shift13);
    (*e105).addDesiredShift(shift14);
    (*e105).addDesiredShift(shift15);
    (*empRepo).addEmployee(e105);
    std::shared_ptr<Employee> e106=std::make_shared<Employee>("Ju",106);
    (*e106).addPosition(doctor);
    shift1.reset(new Shift(0,24,1));
    shift2.reset(new Shift(0,24,3));
    shift3.reset(new Shift(0,24,8));
    shift4.reset(new Shift(0,24,9));
    shift5.reset(new Shift(0,24,10));
    shift6.reset(new Shift(0,24,13));
    shift7.reset(new Shift(0,24,14));
    shift8.reset(new Shift(0,24,18));
    shift9.reset(new Shift(0,24,19));
    shift10.reset(new Shift(0,24,22));
    shift11.reset(new Shift(0,24,24));
    shift12.reset(new Shift(0,24,25));
    shift13.reset(new Shift(0,24,26));
    shift14.reset(new Shift(0,24,28));
    shift15.reset(new Shift(0,24,29));
    (*e106).addDesiredShift(shift1);
    (*e106).addDesiredShift(shift2);
    (*e106).addDesiredShift(shift3);
    (*e106).addDesiredShift(shift4);
    (*e106).addDesiredShift(shift5);
    (*e106).addDesiredShift(shift6);
    (*e106).addDesiredShift(shift7);
    (*e106).addDesiredShift(shift8);
    (*e106).addDesiredShift(shift9);
    (*e106).addDesiredShift(shift10);
    (*e106).addDesiredShift(shift11);
    (*e106).addDesiredShift(shift12);
    (*e106).addDesiredShift(shift13);
    (*e106).addDesiredShift(shift14);
    (*e106).addDesiredShift(shift15);
    (*empRepo).addEmployee(e106);

//team repository
    TeamRepository *teamRepo = TeamRepository::getInstance();

    std::unique_ptr<Shift> monday;
    std::unique_ptr<Shift> tuesday;
    std::unique_ptr<Shift> wednesday;
    std::unique_ptr<Shift> thursday;
    std::unique_ptr<Shift> friday;
    std::unique_ptr<Shift> saturday;
    std::unique_ptr<Shift> sunday;

    std::shared_ptr<Team> tS1 = std::make_shared<Team>("S1");
    (*tS1).addPosition(rescuerS);
    (*tS1).addPosition(doctor);
    (*tS1).addPosition(driverS);
    monday.reset(new Shift(6,18,1));
    tuesday.reset(new Shift(6,18,2));
    wednesday.reset(new Shift(6,18,3));
    thursday.reset(new Shift(6,18,4));
    friday.reset(new Shift(6,18,5));
    saturday.reset(new Shift(8,20,6));
    sunday.reset(new Shift(8,20,7));
    (*tS1).addShift(monday);
    (*tS1).addShift(tuesday);
    (*tS1).addShift(wednesday);
    (*tS1).addShift(thursday);
    (*tS1).addShift(friday);
    (*tS1).addShift(saturday);
    (*tS1).addShift(sunday);
    (*teamRepo).addTeam(tS1);


    std::shared_ptr<Team> tS2 = std::make_shared<Team>("S2");
    (*tS2).addPosition(rescuerS);
    (*tS2).addPosition(doctor);
    (*tS2).addPosition(driverS);
    monday.reset(new Shift(7,19,1));
    tuesday.reset(new Shift(7,19,2));
    wednesday.reset(new Shift(7,19,3));
    thursday.reset(new Shift(7,19,4));
    friday.reset(new Shift(7,19,5));
    saturday.reset(new Shift(9,21,6));
    sunday.reset(new Shift(9,21,7));
    (*tS2).addShift(monday);
    (*tS2).addShift(tuesday);
    (*tS2).addShift(wednesday);
    (*tS2).addShift(thursday);
    (*tS2).addShift(friday);
    (*tS2).addShift(saturday);
    (*tS2).addShift(sunday);
    (*teamRepo).addTeam(tS2);

    std::shared_ptr<Team> tS3 = std::make_shared<Team>("S3");
    (*tS3).addPosition(rescuerS);
    (*tS3).addPosition(doctor);
    (*tS3).addPosition(driverS);
    monday.reset(new Shift(9,19,1));
    tuesday.reset(new Shift(9,19,2));
    wednesday.reset(new Shift(9,19,3));
    thursday.reset(new Shift(9,19,4));
    friday.reset(new Shift(9,19,5));
    saturday.reset(new Shift(9,19,6));
    sunday.reset(new Shift(7));
    (*tS3).addShift(monday);
    (*tS3).addShift(tuesday);
    (*tS3).addShift(wednesday);
    (*tS3).addShift(thursday);
    (*tS3).addShift(friday);
    (*tS3).addShift(saturday);
    (*tS3).addShift(sunday);
    (*teamRepo).addTeam(tS3);

    std::shared_ptr<Team> tS4 = std::make_shared<Team>("S4");
    (*tS4).addPosition(rescuerS);
    (*tS4).addPosition(doctor);
    (*tS4).addPosition(driverS);
    monday.reset(new Shift(10,21,1));
    tuesday.reset(new Shift(10,21,2));
    wednesday.reset(new Shift(10,21,3));
    thursday.reset(new Shift(10,21,4));
    friday.reset(new Shift(10,21,5));
    saturday.reset(new Shift(6));
    sunday.reset(new Shift(7));
    (*tS4).addShift(monday);
    (*tS4).addShift(tuesday);
    (*tS4).addShift(wednesday);
    (*tS4).addShift(thursday);
    (*tS4).addShift(friday);
    (*tS4).addShift(saturday);
    (*tS4).addShift(sunday);
    (*teamRepo).addTeam(tS4);

    std::shared_ptr<Team> t1 = std::make_shared<Team>("1");
    (*t1).addPosition(rescuerN);
    (*t1).addPosition(driverN);
    monday.reset(new Shift(8,17,1));
    tuesday.reset(new Shift(8,17,2));
    wednesday.reset(new Shift(8,17,3));
    thursday.reset(new Shift(8,17,4));
    friday.reset(new Shift(8,17,5));
    saturday.reset(new Shift(6));
    sunday.reset(new Shift(7));
    (*t1).addShift(monday);
    (*t1).addShift(tuesday);
    (*t1).addShift(wednesday);
    (*t1).addShift(thursday);
    (*t1).addShift(friday);
    (*t1).addShift(saturday);
    (*t1).addShift(sunday);
    (*teamRepo).addTeam(t1);

    std::shared_ptr<Team> t2 = std::make_shared<Team>("2");
    (*t2).addPosition(rescuerN);
    (*t2).addPosition(driverN);
    monday.reset(new Shift(9,18,1));
    tuesday.reset(new Shift(9,18,2));
    wednesday.reset(new Shift(9,18,3));
    thursday.reset(new Shift(9,18,4));
    friday.reset(new Shift(9,18,5));
    saturday.reset(new Shift(6));
    sunday.reset(new Shift(7));
    (*t2).addShift(monday);
    (*t2).addShift(tuesday);
    (*t2).addShift(wednesday);
    (*t2).addShift(thursday);
    (*t2).addShift(friday);
    (*t2).addShift(saturday);
    (*t2).addShift(sunday);
    (*teamRepo).addTeam(t2);

    std::shared_ptr<Team> t3 = std::make_shared<Team>("3");
    (*t3).addPosition(rescuerN);
    (*t3).addPosition(driverN);
    monday.reset(new Shift(6,18,1));
    tuesday.reset(new Shift(6,18,2));
    wednesday.reset(new Shift(6,18,3));
    thursday.reset(new Shift(6,18,4));
    friday.reset(new Shift(6,18,5));
    saturday.reset(new Shift(7,17,6));
    sunday.reset(new Shift(7,17,7));
    (*t3).addShift(monday);
    (*t3).addShift(tuesday);
    (*t3).addShift(wednesday);
    (*t3).addShift(thursday);
    (*t3).addShift(friday);
    (*t3).addShift(saturday);
    (*t3).addShift(sunday);
    (*teamRepo).addTeam(t3);

    std::shared_ptr<Team> t4 = std::make_shared<Team>("4");
    (*t4).addPosition(rescuerN);
    (*t4).addPosition(driverN);
    monday.reset(new Shift(10,21,1));
    tuesday.reset(new Shift(10,21,2));
    wednesday.reset(new Shift(10,21,3));
    thursday.reset(new Shift(10,21,4));
    friday.reset(new Shift(10,23,5));
    saturday.reset(new Shift(10,23,6));
    sunday.reset(new Shift(10,23,7));
    (*t4).addShift(monday);
    (*t4).addShift(tuesday);
    (*t4).addShift(wednesday);
    (*t4).addShift(thursday);
    (*t4).addShift(friday);
    (*t4).addShift(saturday);
    (*t4).addShift(sunday);
    (*teamRepo).addTeam(t4);

    std::shared_ptr<Team> t5 = std::make_shared<Team>("5");
    (*t5).addPosition(rescuerN);
    (*t5).addPosition(driverN);
    monday.reset(new Shift(8,19,1));
    tuesday.reset(new Shift(8,19,2));
    wednesday.reset(new Shift(8,19,3));
    thursday.reset(new Shift(8,19,4));
    friday.reset(new Shift(8,19,5));
    saturday.reset(new Shift(6));
    sunday.reset(new Shift(7));
    (*t5).addShift(monday);
    (*t5).addShift(tuesday);
    (*t5).addShift(wednesday);
    (*t5).addShift(thursday);
    (*t5).addShift(friday);
    (*t5).addShift(saturday);
    (*t5).addShift(sunday);
    (*teamRepo).addTeam(t5);

    std::shared_ptr<Team> t6 = std::make_shared<Team>("6");
    (*t6).addPosition(rescuerN);
    (*t6).addPosition(driverN);
    monday.reset(new Shift(10,20,1));
    tuesday.reset(new Shift(10,20,2));
    wednesday.reset(new Shift(10,20,3));
    thursday.reset(new Shift(10,20,4));
    friday.reset(new Shift(10,20,5));
    saturday.reset(new Shift(6));
    sunday.reset(new Shift(7));
    (*t6).addShift(monday);
    (*t6).addShift(tuesday);
    (*t6).addShift(wednesday);
    (*t6).addShift(thursday);
    (*t6).addShift(friday);
    (*t6).addShift(saturday);
    (*t6).addShift(sunday);
    (*teamRepo).addTeam(t6);

    std::shared_ptr<Team> tN1 = std::make_shared<Team>("N1");
    (*tN1).addPosition(rescuerS);
    (*tN1).addPosition(doctor);
    (*tN1).addPosition(driverS);
    monday.reset(new Shift(18,6,1));
    tuesday.reset(new Shift(18,6,2));
    wednesday.reset(new Shift(18,6,3));
    thursday.reset(new Shift(18,6,4));
    friday.reset(new Shift(18,8,5));
    saturday.reset(new Shift(20,8,6));
    sunday.reset(new Shift(20,6,7));
    (*tN1).addShift(monday);
    (*tN1).addShift(tuesday);
    (*tN1).addShift(wednesday);
    (*tN1).addShift(thursday);
    (*tN1).addShift(friday);
    (*tN1).addShift(saturday);
    (*tN1).addShift(sunday);
    (*teamRepo).addTeam(tN1);

    std::shared_ptr<Team> tN2 = std::make_shared<Team>("N2");
    (*tN2).addPosition(rescuerS);
    (*tN2).addPosition(doctor);
    (*tN2).addPosition(driverS);
    monday.reset(new Shift(19,7,1));
    tuesday.reset(new Shift(19,7,2));
    wednesday.reset(new Shift(19,7,3));
    thursday.reset(new Shift(19,7,4));
    friday.reset(new Shift(19,9,5));
    saturday.reset(new Shift(21,9,6));
    sunday.reset(new Shift(21,7,7));
    (*tN2).addShift(monday);
    (*tN2).addShift(tuesday);
    (*tN2).addShift(wednesday);
    (*tN2).addShift(thursday);
    (*tN2).addShift(friday);
    (*tN2).addShift(saturday);
    (*tN2).addShift(sunday);
    (*teamRepo).addTeam(tN2);

    std::shared_ptr<Team> tN3 = std::make_shared<Team>("N3");
    (*tN3).addPosition(rescuerN);
    (*tN3).addPosition(driverN);
    monday.reset(new Shift(20,6,1));
    tuesday.reset(new Shift(20,6,2));
    wednesday.reset(new Shift(20,6,3));
    thursday.reset(new Shift(20,6,4));
    friday.reset(new Shift(20,6,5));
    saturday.reset(new Shift(20,6,6));
    sunday.reset(new Shift(7));
    (*tN3).addShift(monday);
    (*tN3).addShift(tuesday);
    (*tN3).addShift(wednesday);
    (*tN3).addShift(thursday);
    (*tN3).addShift(friday);
    (*tN3).addShift(saturday);
    (*tN3).addShift(sunday);
    (*teamRepo).addTeam(tN3);

    std::shared_ptr<Team> tR = std::make_shared<Team>("R");
    (*tR).addPosition(medicalRecorder);
    monday.reset(new Shift(8,15,1));
    tuesday.reset(new Shift(8,15,2));
    wednesday.reset(new Shift(8,15,3));
    thursday.reset(new Shift(8,15,4));
    friday.reset(new Shift(8,15,5));
    saturday.reset(new Shift(6));
    sunday.reset(new Shift(7));
    (*tR).addShift(monday);
    (*tR).addShift(tuesday);
    (*tR).addShift(wednesday);
    (*tR).addShift(thursday);
    (*tR).addShift(friday);
    (*tR).addShift(saturday);
    (*tR).addShift(sunday);
    (*teamRepo).addTeam(tR);

    std::shared_ptr<Team> tDD = std::make_shared<Team>("DD");
    (*tDD).addPosition(dispatcher);
    monday.reset(new Shift(7,18,1));
    tuesday.reset(new Shift(7,18,2));
    wednesday.reset(new Shift(7,18,3));
    thursday.reset(new Shift(7,18,4));
    friday.reset(new Shift(7,18,5));
    saturday.reset(new Shift(7,18,6));
    sunday.reset(new Shift(7,18,7));
    (*tDD).addShift(monday);
    (*tDD).addShift(tuesday);
    (*tDD).addShift(wednesday);
    (*tDD).addShift(thursday);
    (*tDD).addShift(friday);
    (*tDD).addShift(saturday);
    (*tDD).addShift(sunday);
    (*teamRepo).addTeam(tDD);

    std::shared_ptr<Team> tDN = std::make_shared<Team>("DN");
    (*tDN).addPosition(dispatcher);
    monday.reset(new Shift(18,7,1));
    tuesday.reset(new Shift(18,7,2));
    wednesday.reset(new Shift(18,7,3));
    thursday.reset(new Shift(18,7,4));
    friday.reset(new Shift(18,7,5));
    saturday.reset(new Shift(18,7,6));
    sunday.reset(new Shift(18,7,7));
    (*tDN).addShift(monday);
    (*tDN).addShift(tuesday);
    (*tDN).addShift(wednesday);
    (*tDN).addShift(thursday);
    (*tDN).addShift(friday);
    (*tDN).addShift(saturday);
    (*tDN).addShift(sunday);
    (*teamRepo).addTeam(tDN);

//schedule
    FinalSchedule finalSchedule(teamRepo,empRepo);
    finalSchedule.makeSchedule();
    std::cout<<finalSchedule.scheduleInfo();
    return 0;
}
